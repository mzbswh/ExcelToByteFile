using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using NPOI.HSSF.UserModel;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using System.Diagnostics;

namespace ExcelParseTool
{
    partial class ParseTool
    {

        public static List<string> allClassName;
        public static string headStr = "//------------------------------------------------------------------------------\n" +
            "// <auto-generated>\n" +
            "//     This code was generated by a tool.\n" +
            "//     Changes to this file may cause incorrect behavior and will be lost if\n" +
            "//     the code is regenerated.\n" +
            "// </auto-generated>\n" +
            "//------------------------------------------------------------------------------\n" +
            "using UnityEngine;\n" +
            "using System.Collections;\n" +
            "using System.Collections.Generic;\n\n";

        /// <summary>
        /// 输入c#代码生成模式
        /// </summary>
        public static void InputCsCodeGenMode()
        {
            if (byteFileOffLevel == 0)
            {
                genType = GenIndexType.None;
                return;
            }
            Console.Write("是否将数据全部读取并转为c#里的类的数据(y/n)：");
            ConsoleKeyInfo key = Console.ReadKey();
            Console.WriteLine();
            if (key.KeyChar == 'y')
            {
                genType = GenIndexType.None;
            }
            else
            {
                if (byteFileOffLevel == 1)
                {
                    genType = GenIndexType.OnlyHeadOfLine;
                    return;
                }
                Console.Write("是否生成每行每个数据的索引，为n时只生成每行行首索引(y/n)：");
                ConsoleKeyInfo key1 = Console.ReadKey();
                Console.WriteLine();
                if (key1.KeyChar == 'y')
                {
                    genType = GenIndexType.EveryData;
                }
                else
                {
                    genType = GenIndexType.OnlyHeadOfLine;
                }
            }
        }
        /// <summary>
        /// 生成单个c#代码文件
        /// </summary>
        /// <param name="file"></param>
        /// <param name="wb"></param>
        public static void GenSingleCSCodeFile(FileInfo file, IWorkbook wb)
        {
            switch (genType)
            {
                case GenIndexType.None:
                    GenCsCode_NoIndex_1(file, wb);
                    break;
                case GenIndexType.OnlyHeadOfLine:
                    GenCsCode_IndexOne_1(file, wb);
                    break;
                case GenIndexType.EveryData:
                    GenCsCode_IndexTwo(file, wb);
                    break;
            }
        }
        public static void GenCsCode_NoIndex(FileInfo file, IWorkbook wb)
        {
            string codeStr = headStr;
            ISheet sheet = wb.GetSheetAt(0);
            int colNum = GetTotalCols(sheet);
            int rowNum = GetTotalRows(sheet);
            string[] comments = GetAllStringOneLine(sheet.GetRow(0), colNum, 1);  //读取注释信息
            string[] varTypes = GetAllStringOneLine(sheet.GetRow(1), colNum, 2);  //读取每列类型信息
            string[] varNames = GetAllStringOneLine(sheet.GetRow(2), colNum, 3);  //读取变量名称
            ElemType[] elemTypes = GetAllElemType(sheet.GetRow(1), colNum);
            string tempName = Path.GetFileNameWithoutExtension(file.Name);
            string fileName = "Dict" + tempName.Substring(0, 1).ToUpper() + tempName.Substring(1).ToLower();
            string byteFileName = Path.GetFileNameWithoutExtension(file.Name).ToLower() + ".bytes";
            if (fileName.Contains("_"))
            {
                string[] tmp = fileName.Split('_');
                if (tmp.Length > 2)
                {
                    throw new Exception("错误的文件名称：包含大于2个 _ 字符" + fileName);
                }
                if (tmp[1].Length > 1)
                {
                    tmp[1] = tmp[1].Substring(0, 1).ToUpper() + tmp[1].Substring(1).ToLower();
                }
                fileName = tmp[0] + tmp[1];
            }
            //fileName = fileName.Replace("_", "");
            allClassName.Add(fileName);

            // 旧代码
            //codeStr += "public partial class " + fileName + "\n{\n";
            //codeStr += GenModel(genType, comments, varTypes, varNames);
            //codeStr += "\t///<summary>model id对应数组的索引</summary>\n";
            //codeStr += "\tprivate Dictionary<int, int> id2index;\n\n";
            //codeStr += "\tprivate int[] ids;\n";
            //codeStr += GenIdsProperty();

            ////codeStr += GenIndexerFunc();
            //codeStr += GenGetModelFunc(genType, fileName, varNames, elemTypes);
            //codeStr += GenLoadFunc(fileName);
            //codeStr += GenGetFileNameFunc(byteFileName);
            //codeStr += GenParseFunc(genType, fileName, varNames, elemTypes);
            //codeStr += GenInitArrayFunc(varNames, elemTypes, rowNum);
            //codeStr += GenEveryDataGetFunc(comments, elemTypes, varNames, fileName, genType);
            //codeStr += GenHasIdFunc(genType);
            //codeStr += "}";

            // 新
            codeStr += "public partial class " + fileName + "\n{\n";
            codeStr += "\tpublic const short excelId = " + (totalFileNum - 1).ToString() + ";\n";
            codeStr += GenModel(genType, comments, varTypes, varNames);

            codeStr += "\tprivate Dictionary<int, Model> m_dict;\n\n";
            codeStr += "\tpublic Dictionary<int, Model> Dict\n\t{\n";
            codeStr += "\t\tget\n\t\t{\n";
            codeStr += "\t\t\tif (m_dict == null || m_dict.Count < Ids.Length)\n\t\t\t{\n";
            codeStr += "\t\t\t\tGenAllModel();\n\t\t\t}\n";
            codeStr += "\t\t\treturn m_dict;\n\t\t}\n\t}\n\n";

            codeStr += "\tpublic int[] Ids { get { return ExcelDataStorage.excelId2ids[excelId]; } }\n\n";

            codeStr += GenInitFunc(fileName, elemTypes, GenIndexType.None);
            //codeStr += GenIndexerFunc();
            codeStr += GenGetModelFunc(genType, fileName, varNames, elemTypes);
            //codeStr += GenLoadFunc(fileName);
            codeStr += GenGetFileNameFunc(byteFileName);
            //codeStr += GenParseFunc(genType, fileName, varNames, elemTypes);
            //codeStr += GenInitArrayFunc(varNames, elemTypes, rowNum);
            codeStr += GenEveryDataGetFunc(comments, elemTypes, varNames, fileName, genType);
            codeStr += GenHasIdFunc(genType);
            codeStr += "}";

            //生成代码文件
            string path = parentDir + outputDir + csCodeDir + "/" + fileName + ".cs";
            using (FileStream fs1 = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (StreamWriter sw = new StreamWriter(fs1))
                {
                    sw.WriteLine(codeStr);
                }
            }
            Console.WriteLine("生成" + fileName + ".cs代码文件成功");
            logStr += "生成" + fileName + ".cs代码文件成功\n";
        }
        public static void GenCsCode_NoIndex_1(FileInfo file, IWorkbook wb)
        {
            string codeStr = headStr;
            ISheet sheet = wb.GetSheetAt(0);
            int colNum = GetTotalCols(sheet);
            int rowNum = GetTotalRows(sheet);
            string[] comments = GetAllStringOneLine(sheet.GetRow(0), colNum, 1);  //读取注释信息
            string[] varTypes = GetAllStringOneLine(sheet.GetRow(1), colNum, 2);  //读取每列类型信息
            string[] varNames = GetAllStringOneLine(sheet.GetRow(2), colNum, 3);  //读取变量名称
            ElemType[] elemTypes = GetAllElemType(sheet.GetRow(1), colNum);
            string tempName = Path.GetFileNameWithoutExtension(file.Name);
            string fileName = "Dict" + tempName.Substring(0, 1).ToUpper() + tempName.Substring(1).ToLower();
            string byteFileName = Path.GetFileNameWithoutExtension(file.Name).ToLower() + ".bytes";
            if (fileName.Contains("_"))
            {
                string[] tmp = fileName.Split('_');
                if (tmp.Length > 2)
                {
                    throw new Exception("错误的文件名称：包含大于2个 _ 字符" + fileName);
                }
                if (tmp[1].Length > 1)
                {
                    tmp[1] = tmp[1].Substring(0, 1).ToUpper() + tmp[1].Substring(1).ToLower();
                }
                fileName = tmp[0] + tmp[1];
            }
            //fileName = fileName.Replace("_", "");
            allClassName.Add(fileName);
            codeStr += "public partial class " + fileName + "\n{\n";
            codeStr += GenModel(genType, comments, varTypes, varNames);

            codeStr += "\tprivate bool inited = false;\n\n";

            codeStr += "\tprivate Dictionary<int, Model> m_dict;\n";
            //codeStr += "\tpublic Dictionary<int, Model> Dict { get { return m_dict; } }\n\n";
            codeStr += "\tpublic Dictionary<int, Model> Dict\n\t{\n";
            codeStr += "\t\tget\n\t\t{\n";
            codeStr += "\t\t\tif (!inited)\n\t\t\t{\n";
            codeStr += "\t\t\t\tInit();\n\t\t\t}\n";
            codeStr += "\t\t\treturn m_dict;\n\t\t}\n\t}\n\n";

            codeStr += "\tprivate List<int> ids;\n";
            codeStr += "\tpublic List<int> Ids { get { return ids; } }\n\n";

            codeStr += GenInitFunc(fileName, elemTypes, GenIndexType.None);
            codeStr += GenGetModelFunc(genType, fileName, varNames, elemTypes);
            codeStr += GenIndexerFunc();
            codeStr += GenGetFileNameFunc(byteFileName);
            //codeStr += GenEveryDataGetFunc(comments, elemTypes, varNames, fileName, genType);
            codeStr += GenHasIdFunc(genType);
            codeStr += "}";

            //生成代码文件
            string path = parentDir + outputDir + csCodeDir + "/" + fileName + ".cs";
            using (FileStream fs1 = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (StreamWriter sw = new StreamWriter(fs1))
                {
                    sw.WriteLine(codeStr);
                }
            }
            Console.WriteLine("生成" + fileName + ".cs代码文件成功");
            logStr += "生成" + fileName + ".cs代码文件成功\n";
        }
        public static void GenCsCode_IndexOne(FileInfo file, IWorkbook wb)
        {
            string codeStr = headStr;
            ISheet sheet = wb.GetSheetAt(0);
            int colNum = GetTotalCols(sheet);
            int rowNum = GetTotalRows(sheet);
            string[] comments = GetAllStringOneLine(sheet.GetRow(0), colNum, 1);  //读取注释信息
            string[] varTypes = GetAllStringOneLine(sheet.GetRow(1), colNum, 2);  //读取每列类型信息
            string[] varNames = GetAllStringOneLine(sheet.GetRow(2), colNum, 3);  //读取变量名称
            ElemType[] elemTypes = GetAllElemType(sheet.GetRow(1), colNum);
            string tempName = Path.GetFileNameWithoutExtension(file.Name);
            string fileName = "Dict" + tempName.Substring(0, 1).ToUpper() + tempName.Substring(1).ToLower();
            string byteFileName = Path.GetFileNameWithoutExtension(file.Name).ToLower() + ".bytes";
            if (fileName.Contains("_"))
            {
                string[] tmp = fileName.Split('_');
                if (tmp.Length > 2)
                {
                    throw new Exception("错误的文件名称：包含大于2个 _ 字符" + fileName);
                }
                if (tmp[1].Length > 1)
                {
                    tmp[1] = tmp[1].Substring(0, 1).ToUpper() + tmp[1].Substring(1).ToLower();
                }
                fileName = tmp[0] + tmp[1];
            }
            //fileName = fileName.Replace("_", "");
            allClassName.Add(fileName);

            codeStr += "public partial class " + fileName + "\n{\n";
            codeStr += GenModel(genType, comments, varTypes, varNames);
            codeStr += "\t///<summary>model id对应行首在字节数组的索引</summary>\n";
            codeStr += "\tprivate Dictionary<int, int> id2headIndex;\n";
            codeStr += "\t///<summary>存储数据的字节数组</summary>\n";
            codeStr += "\tprivate byte[] data;\n\n";
            codeStr += "\tprivate int[] ids;\n";
            codeStr += GenIdsProperty();

            //codeStr += GenIndexerFunc();
            codeStr += GenGetModelFunc(genType, fileName, varNames, elemTypes);
            codeStr += GenLoadFunc(fileName);
            codeStr += GenGetFileNameFunc(byteFileName);
            codeStr += GenParseFunc(genType, fileName, varNames, elemTypes);
            //codeStr += GenParseOneModelByHeadIndexFunc(varNames, elemTypes);
            codeStr += GenHasIdFunc(genType);
            codeStr += "}";
            //生成代码文件
            string path = parentDir + outputDir + csCodeDir + "/" + fileName + ".cs";
            using (FileStream fs1 = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (StreamWriter sw = new StreamWriter(fs1))
                {
                    sw.WriteLine(codeStr);
                }
            }
            Console.WriteLine("生成" + fileName + ".cs代码文件成功");
            logStr += "生成" + fileName + ".cs代码文件成功\n";
        }
        public static void GenCsCode_IndexOne_1(FileInfo file, IWorkbook wb)
        {
            string codeStr = headStr;
            ISheet sheet = wb.GetSheetAt(0);
            int colNum = GetTotalCols(sheet);
            int rowNum = GetTotalRows(sheet);
            string[] comments = GetAllStringOneLine(sheet.GetRow(0), colNum, 1);  //读取注释信息
            string[] varTypes = GetAllStringOneLine(sheet.GetRow(1), colNum, 2);  //读取每列类型信息
            string[] varNames = GetAllStringOneLine(sheet.GetRow(2), colNum, 3);  //读取变量名称
            ElemType[] elemTypes = GetAllElemType(sheet.GetRow(1), colNum);
            string tempName = Path.GetFileNameWithoutExtension(file.Name);
            string fileName = "Dict" + tempName.Substring(0, 1).ToUpper() + tempName.Substring(1).ToLower();
            string byteFileName = Path.GetFileNameWithoutExtension(file.Name).ToLower() + ".bytes";
            if (fileName.Contains("_"))
            {
                string[] tmp = fileName.Split('_');
                if (tmp.Length > 2)
                {
                    throw new Exception("错误的文件名称：包含大于2个 _ 字符" + fileName);
                }
                if (tmp[1].Length > 1)
                {
                    tmp[1] = tmp[1].Substring(0, 1).ToUpper() + tmp[1].Substring(1).ToLower();
                }
                fileName = tmp[0] + tmp[1];
            }
            //fileName = fileName.Replace("_", "");
            allClassName.Add(fileName);

            codeStr += "public partial class " + fileName + "\n{\n";
            codeStr += "\tpublic const short excelId = " + (totalFileNum - 1).ToString() + ";\n";
            codeStr += GenModel(genType, comments, varTypes, varNames);

            codeStr += "\tprivate Dictionary<int, Model> m_dict;\n\n";
            codeStr += "\tpublic Dictionary<int, Model> Dict\n\t{\n";
            codeStr += "\t\tget\n\t\t{\n";
            codeStr += "\t\t\tif (m_dict == null || m_dict.Count < Ids.Length)\n\t\t\t{\n";
            codeStr += "\t\t\t\tGenAllModel();\n\t\t\t}\n";
            codeStr += "\t\t\treturn m_dict;\n\t\t}\n\t}\n\n";

            codeStr += "\tpublic int[] Ids { get { return ExcelDataStorage.excelId2ids[excelId]; } }\n\n";

            codeStr += GenInitFunc(fileName, elemTypes, GenIndexType.OnlyHeadOfLine);
            //codeStr += GenIndexerFunc();
            codeStr += GenGetModelFunc(genType, fileName, varNames, elemTypes);
            //codeStr += GenLoadFunc(fileName);
            codeStr += GenGetFileNameFunc(byteFileName);
            //codeStr += GenParseFunc(genType, fileName, varNames, elemTypes);
            //codeStr += GenInitArrayFunc(varNames, elemTypes, rowNum);
            codeStr += GenEveryDataGetFunc(comments, elemTypes, varNames, fileName, genType);
            codeStr += GenHasIdFunc(genType);
            codeStr += "}";

            //生成代码文件
            string path = parentDir + outputDir + csCodeDir + "/" + fileName + ".cs";
            using (FileStream fs1 = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (StreamWriter sw = new StreamWriter(fs1))
                {
                    sw.WriteLine(codeStr);
                }
            }
            Console.WriteLine("生成" + fileName + ".cs代码文件成功");
            logStr += "生成" + fileName + ".cs代码文件成功\n";
        }
        public static void GenCsCode_IndexTwo(FileInfo file, IWorkbook wb)
        {
            string codeStr = headStr;
            ISheet sheet = wb.GetSheetAt(0);
            int colNum = GetTotalCols(sheet);
            int rowNum = GetTotalRows(sheet);
            string[] comments = GetAllStringOneLine(sheet.GetRow(0), colNum, 1);  //读取注释信息
            string[] varTypes = GetAllStringOneLine(sheet.GetRow(1), colNum, 2);  //读取每列类型信息
            string[] varNames = GetAllStringOneLine(sheet.GetRow(2), colNum, 3);  //读取变量名称
            ElemType[] elemTypes = GetAllElemType(sheet.GetRow(1), colNum);
            string tempName = Path.GetFileNameWithoutExtension(file.Name);
            string fileName = "Dict" + tempName.Substring(0, 1).ToUpper() + tempName.Substring(1).ToLower();
            string byteFileName = Path.GetFileNameWithoutExtension(file.Name).ToLower() + ".bytes";
            if (fileName.Contains("_"))
            {
                string[] tmp = fileName.Split('_');
                if (tmp.Length > 2)
                {
                    throw new Exception("错误的文件名称：包含大于2个 _ 字符" + fileName);
                }
                if (tmp[1].Length > 1)
                {
                    tmp[1] = tmp[1].Substring(0, 1).ToUpper() + tmp[1].Substring(1).ToLower();
                }
                fileName = tmp[0] + tmp[1];
            }
            //fileName = fileName.Replace("_", "");
            allClassName.Add(fileName);

            codeStr += "public partial class " + fileName + "\n{\n";
            codeStr += GenModel(genType, comments, varTypes, varNames);
            codeStr += "\t///<summary>key：模型id，value：模型在字节数组的起始索引</summary>\n";
            codeStr += "\tprivate Dictionary<int, int> id2headIndex;\n";
            codeStr += "\t///<summary>key：模型id，value：模型内每个元素相对起始索引的偏移</summary>\n";
            codeStr += "\tprivate Dictionary<int, short[]> id2inLineIndex;\n";
            codeStr += "\t///<summary>存储数据的字节数组</summary>\n";
            codeStr += "\tprivate byte[] data;\n\n";
            codeStr += "\tprivate int[] ids;\n";
            codeStr += GenIdsProperty();

            //codeStr += GenIndexerFunc();
            codeStr += GenGetModelFunc(genType, fileName, varNames, elemTypes);
            codeStr += GenLoadFunc(fileName);
            codeStr += GenGetFileNameFunc(byteFileName);
            codeStr += GenParseFunc(genType, fileName, varNames, elemTypes);
            //codeStr += GenParseOneModelByHeadIndexFunc(varNames, elemTypes);
            codeStr += "\n\t//以下为获取模型单个变量的方法\n";
            codeStr += GenEveryDataGetFunc(comments, elemTypes, varNames, fileName, genType);
            codeStr += GenHasIdFunc(genType);
            codeStr += "}";
            //生成代码文件
            string path = parentDir + outputDir + csCodeDir + "/" + fileName + ".cs";
            using (FileStream fs1 = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (StreamWriter sw = new StreamWriter(fs1))
                {
                    sw.WriteLine(codeStr);
                }
            }
            Console.WriteLine("生成" + fileName + ".cs代码文件成功");
            logStr += "生成" + fileName + ".cs代码文件成功\n";
        }
        /// <summary>
        /// 生成字典管理器代码文件
        /// </summary>
        public static void GenDictManager()
        {
            string codeStr = headStr;
            string codeStr1 = "";
            codeStr += @"public class DictDataManager
{
            |   private static DictDataManager m_instance;
            |   private string m_dataPath = ""data/"";
            |   
            |   public static DictDataManager Instance
            |   {
            |       get
            |       {
            |           if(m_instance == null)
            |           {
            |               m_instance = new DictDataManager();
            |           }
            |           return m_instance;
            |       }
            |   }
            |
            |   public static void Release()
            |   {
            |       m_instance = null;
            |   }
            |
            |   public void Init()
            |   {
            |".StripMargin();
            for (int i = 0; i < allClassName.Count; i++)
            {
                string insName = allClassName[i].Substring(0, 1).ToLower() + allClassName[i].Substring(1);
                codeStr += "\t\t" + insName + ".Init();\n";
                codeStr1 += "\tpublic " + allClassName[i] + " " + insName + " = new " + allClassName[i] + "();\n";
            }
            codeStr += "\t}\n\n";
            codeStr += "\t//以下为类声明\n";
            codeStr += codeStr1;
            codeStr += "}";
            //生成代码文件
            string path = parentDir + outputDir + csCodeDir + "/DictDataManager.cs";
            using (FileStream fs1 = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (StreamWriter sw = new StreamWriter(fs1))
                {
                    sw.WriteLine(codeStr);
                }
            }
            Console.WriteLine("生成DictDataManager.cs代码文件成功");
        }

        /// <summary>
        /// 生成代码中的模型类
        /// </summary>
        /// <param name="parseAlldata">如果解析所有数据，就生成所有变量数组，否则生成一个结构体</param>
        /// <returns></returns>
        public static string GenModel(GenIndexType genType, string[] comments, string[] varTypes, string[] varNames)
        {
            string ret = "";
            if (genType == GenIndexType.None)
            {
                // 旧 读取excelDataStorage的数据
                //int intOff = 0, floatOff = 0, stringOff = 0;
                //ret += "\t///<summary>\n\t///单个数据模型类\n\t///</summary>\n";
                //ret += "\tpublic class Model\n\t{\n";
                //ret += "\t\tpublic int intStart, floatStart, stringStart;\n";
                //for (int i = 0; i < varTypes.Length; i++)
                //{
                //    ret += "\t\t/// <summary>" + comments[i] + "</summary>\n";
                //    switch (varTypes[i])
                //    {
                //        case "int":
                //            if (intOff == 0)
                //            {
                //                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.arr_intData[intStart]; } }\n";
                //            }
                //            else
                //            {
                //                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.arr_intData[intStart + " + intOff + "]; } }\n";
                //            }
                //            intOff++;
                //            break;
                //        case "float":
                //            if (floatOff == 0)
                //            {
                //                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.arr_floatData[floatStart]; } }\n";
                //            }
                //            else
                //            {
                //                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.arr_floatData[floatStart + " + floatOff + "]; } }\n";
                //            }
                //            floatOff++;
                //            break;
                //        case "string":
                //            if (stringOff == 0)
                //            {
                //                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.arr_stringData[stringStart]; } }\n";
                //            }
                //            else
                //            {
                //                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.arr_stringData[stringStart + " + stringOff + "]; } }\n";
                //            }
                //            stringOff++;
                //            break;
                //        default:
                //            Console.WriteLine("错误的类型 = " + varTypes[i]);
                //            break;
                //    }
                //}
                //ret += "\t}\n\n";

                //新 1 全部数据读取到类里
                //int intOff = 0, floatOff = 0, stringOff = 0;
                //bool haveFloat = false, haveString = false;
                //for (int i = 0; i < varTypes.Length; i++)
                //{
                //    if (haveFloat == false && varTypes[i] == "float")
                //    {
                //        haveFloat = true;
                //    }
                //    else if (haveString == false && varTypes[i] == "string")
                //    {
                //        haveString = true;
                //    }
                //}
                string code1 = "";
                string code2 = "";
                ret += "\t///<summary>\n\t///单个数据模型类\n\t///</summary>\n";
                ret += "\tpublic class Model\n\t{\n";
                //code1 += "\t\t\tint intStart = ByteFileParseTool.id2intStart[id];\n";
                //if (haveFloat)
                //    code1 += "\t\t\tint floatStart = ByteFileParseTool.id2floatStart[id];\n";
                //if (haveString)
                //    code1 += "\t\t\tint stringStart = ByteFileParseTool.id2stringStart[id];\n";
                //code1 += "\n";
                for (int i = 0; i < varTypes.Length; i++)
                {
                    code2 += "\t\t/// <summary>" + comments[i] + "</summary>\n";
                    code2 += "\t\tpublic " + varTypes[i] + " " + varNames[i] + ";\n";
                    switch (varTypes[i])
                    {
                        case "int":
                            code1 += "\t\t\tthis." + varNames[i] + " = ByteFileParseTool.que_intData.Dequeue();\n";
                            //if (intOff == 0)
                            //{
                            //    code1 += "\t\t\tthis." + varNames[i] + " = ByteFileParseTool.ls_intData[intStart];\n";
                            //}
                            //else
                            //{
                            //    code1 += "\t\t\tthis." + varNames[i] + " = ByteFileParseTool.ls_intData[intStart + " + intOff + "];\n";
                            //}

                            //intOff++;
                            break;
                        case "float":
                            code1 += "\t\t\tthis." + varNames[i] + " = ByteFileParseTool.que_floatData.Dequeue();\n";
                            //if (floatOff == 0)
                            //{
                            //    code1 += "\t\t\tthis." + varNames[i] + " = ByteFileParseTool.ls_floatData[floatStart];\n";
                            //}
                            //else
                            //{
                            //    code1 += "\t\t\tthis." + varNames[i] + " = ByteFileParseTool.ls_floatData[floatStart + " + floatOff + "];\n";
                            //}
                            //floatOff++;
                            break;
                        case "string":
                            code1 += "\t\t\tthis." + varNames[i] + " = ByteFileParseTool.que_stringData.Dequeue();\n";
                            //if (stringOff == 0)
                            //{
                            //    code1 += "\t\t\tthis." + varNames[i] + " = ByteFileParseTool.ls_stringData[stringStart];\n";
                            //}
                            //else
                            //{
                            //    code1 += "\t\t\tthis." + varNames[i] + " = ByteFileParseTool.ls_stringData[stringStart + " + stringOff + "];\n";
                            //}
                            //stringOff++;
                            break;
                        default:
                            Console.WriteLine("错误的类型 = " + varTypes[i]);
                            break;
                    }
                }
                ret += "\t\tpublic Model()\n\t\t{\n";
                ret += code1;
                ret += "\t\t}\n";
                ret += code2;
                ret += "\t}\n\n";
            }
            else if (genType == GenIndexType.OnlyHeadOfLine)
            {
                int intOff = 0, floatOff = 0, stringOff = 0;
                ret += "\t///<summary>\n\t///单个数据模型类\n\t///</summary>\n";
                ret += "\tpublic class Model\n\t{\n";
                ret += "\t\tpublic int intStart, floatStart, stringStart;\n";
                for (int i = 0; i < varTypes.Length; i++)
                {
                    ret += "\t\t/// <summary>" + comments[i] + "</summary>\n";
                    switch (varTypes[i])
                    {
                        case "int":
                            if (intOff == 0)
                            {
                                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.ls_intData[intStart]; } }\n";
                            }
                            else
                            {
                                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.ls_intData[intStart + " + intOff + "]; } }\n";
                            }
                            intOff++;
                            break;
                        case "float":
                            if (floatOff == 0)
                            {
                                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.ls_floatData[floatStart]; } }\n";
                            }
                            else
                            {
                                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.ls_floatData[floatStart + " + floatOff + "]; } }\n";
                            }
                            floatOff++;
                            break;
                        case "string":
                            if (stringOff == 0)
                            {
                                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.ls_stringData[stringStart]; } }\n";
                            }
                            else
                            {
                                ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + " { get { return ExcelDataStorage.ls_stringData[stringStart + " + stringOff + "]; } }\n";
                            }
                            stringOff++;
                            break;
                        default:
                            Console.WriteLine("错误的类型 = " + varTypes[i]);
                            break;
                    }
                }
                ret += "\t}\n\n";
            }
            //if (genType == GenIndexType.None)
            //{
            //    ret += "\t//声明每个变量对应的数组变量\n";
            //    for (int i = 0; i < varTypes.Length; i++)
            //    {
            //        ret += "\t/// <summary>" + comments[i] + "</summary>\n";
            //        ret += "\tprivate " + varTypes[i] + "[] " + varNames[i] + ";\n";
            //    }
            //    ret += "\n";
            //}
            else
            {
                ret += "\t///<summary>\n\t///单个数据模型类\n\t///</summary>\n";
                ret += "\tpublic class Model\n\t{\n";
                for (int i = 0; i < varTypes.Length; i++)
                {
                    ret += "\t\t/// <summary>" + comments[i] + "</summary>\n";
                    ret += "\t\tpublic " + varTypes[i] + " " + varNames[i] + ";\n";
                }
                ret += "\t}\n\n";
            }
            return ret;
        }
        /// <summary>
        /// 生成获取模型数据方法
        /// </summary>
        /// <param name="genType"></param>
        /// <param name="fileName"></param>
        /// <param name="varNames"></param>
        /// <returns></returns>
        public static string GenGetModelFunc(GenIndexType genType, string fileName, string[] varNames, ElemType[] elemTypes)
        {
            string ret = "\t/// <summary>\n\t/// 获取id对应的数据模型结构体\n\t/// </summary>\n";
            ret += "\tpublic Model GetModel(int id)\n\t{";
            bool haveFloat = false, haveString = false;
            for (int i = 0; i < elemTypes.Length; i++)
            {
                if (haveFloat == false && elemTypes[i] == ElemType.Float)
                {
                    haveFloat = true;
                }
                else if (haveString == false && elemTypes[i] == ElemType.String)
                {
                    haveString = true;
                }
            }
            switch (genType)
            {
                case GenIndexType.None:
                    // 旧
                    //ret += @"
                    //|       if (m_dict != null && m_dict.ContainsKey(id))
                    //|       {
                    //|           return m_dict[id];
                    //|       }
                    //|       else
                    //|       {
                    //|           if (ExcelDataStorage.excelId2intIndexDict[excelId].ContainsKey(id))
                    //|           {
                    //|               ".StripMargin() + fileName + @".Model md = new ".StripMargin() + fileName + @".Model
                    //|               {
                    //|                   intStart = ExcelDataStorage.excelId2intIndexDict[excelId][id],".StripMargin();
                    //if (haveFloat)
                    //{
                    //    ret += @"
                    //|                   floatStart = ExcelDataStorage.excelId2floatIndexDict[excelId][id],".StripMargin();
                    //}
                    //if (haveString)
                    //{
                    //    ret += @"
                    //|                   stringStart = ExcelDataStorage.excelId2stringIndexDict[excelId][id]".StripMargin();
                    //}
                    //ret += @"
                    //|               };
                    //|               if (m_dict == null)
                    //|               {
                    //|                   m_dict = new Dictionary<int, Model>();
                    //|               }
                    //|               m_dict.Add(id, md);
                    //|               return md;
                    //|           }
                    //|           else
                    //|           {
                    //|               return null;
                    //|           }
                    //|       }
                    //|   }
                    //|".StripMargin();

                    //新
                    ret += @"
                    |       if (!inited)
                    |           Init();
                    |       if (m_dict.ContainsKey(id))
                    |       {
                    |           return m_dict[id];
                    |       }
                    |       else
                    |       {
                    |           return null;
                    |       }
                    |   }
                    |".StripMargin();
                    break;
                case GenIndexType.OnlyHeadOfLine:
                    ret += @"
                    |       if (m_dict != null && m_dict.ContainsKey(id))
                    |       {
                    |           return m_dict[id];
                    |       }
                    |       else
                    |       {
                    |           if (ExcelDataStorage.excelId2indexDict[excelId].ContainsKey(id))
                    |           {
                    |               ExcelDataStorage.ParseOneModel(excelId, id);
                    |               ".StripMargin() + fileName + @".Model md = new ".StripMargin() + fileName + @".Model
                    |               {
                    |                   intStart = ExcelDataStorage.excelId2intIndexDict[excelId][id],".StripMargin();
                    if (haveFloat)
                    {
                        ret += @"
                    |                   floatStart = ExcelDataStorage.excelId2floatIndexDict[excelId][id],".StripMargin();
                    }
                    if (haveString)
                    {
                        ret += @"
                    |                   stringStart = ExcelDataStorage.excelId2stringIndexDict[excelId][id]".StripMargin();
                    }
                    ret += @"
                    |               };
                    |               if (m_dict == null)
                    |               {
                    |                   m_dict = new Dictionary<int, Model>();
                    |               }
                    |               m_dict.Add(id, md);
                    |               return md;
                    |           }
                    |           else
                    |           {
                    |               return null;
                    |           }
                    |       }
                    |   }
                    |".StripMargin();
                    break;
                case GenIndexType.EveryData:
                    ret += @"
                    |       if (id2headIndex == null)
                    |       {
                    |           Debug.LogError(""".StripMargin() + fileName + @" id2headIndex Is Null"");
                    |           return new Model();
                    |       }
                    |       else
                    |       {
                    |           if (id2headIndex.ContainsKey(id))
                    |           {
                    |               int curIndex = id2headIndex[id]; 
                    |               Model md = new Model()
                    |               {
                    |".StripMargin();
                    for (int i = 0; i < varNames.Length; i++)
                    {
                        switch (elemTypes[i])
                        {
                            case ElemType.Int:
                                ret += "\t\t\t\t\t" + varNames[i] + " = ByteFileParseTool.ParseInt_AutoInc(data, ref curIndex, false),\n";
                                break;
                            case ElemType.Float:
                                ret += "\t\t\t\t\t" + varNames[i] + " = ByteFileParseTool.ParseFloat_AutoInc(data, ref curIndex),\n";
                                break;
                            case ElemType.String:
                                ret += "\t\t\t\t\t" + varNames[i] + " = ByteFileParseTool.ParseString_AutoInc(data, ref curIndex),\n";
                                break;
                            default:
                                throw new Exception("错误的变量类型 = " + elemTypes[i].ToString());
                        }
                    }
                    ret += @"                };
                    |               return md;
                    |           }
                    |           else
                    |           {
                    |               Debug.LogError(""要查找的id不存在"");
                    |               return new Model();
                    |           }
                    |       }
                    |   }
                    |".StripMargin();
                    break;
            }
            return ret;
        }
        /// <summary>
        /// 生成加载字节文件方法
        /// </summary>
        /// <param name="byteFileName"></param>
        /// <returns></returns>
        public static string GenLoadFunc(string byteFileName)
        {
            string ret = "\t///<summary>\n\t///加载" + byteFileName + "文件数据\n\t///</summary>\n";
            ret += "\tpublic void Load(string path)\n\t{\n";
            ret += "\t\tstring filePath = path;\n";
            ret += "\t\tif(!filePath.EndsWith(\"/\"))\n";
            ret += "\t\t{\n";
            ret += "\t\t\tfilePath += \"/\";\n";
            ret += "\t\t}\n";
            ret += "\t\tfilePath += GetFileName();\n";
            ret += "\t\tbyte[] data = ByteFileParseTool.Load(filePath);\n";
            ret += "\t\tParse(data);\n";
            ret += "\t}\n";
            return ret;
        }
        /// <summary>
        /// 生成获取文件名称方法
        /// </summary>
        /// <param name="byteFileName"></param>
        /// <returns></returns>
        public static string GenGetFileNameFunc(string byteFileName)
        {
            string ret = "\t///<summary>\n\t///获取数据文件名称\n\t///</summary>\n";
            ret += "\tpublic string GetFileName()\n\t{\n";
            ret += "\t\treturn \"" + byteFileName + "\";\n";
            ret += "\t}\n";
            return ret;
        }
        /// <summary>
        /// 生成解析数据方法
        /// </summary>
        /// <param name="genType"></param>
        /// <param name="fileName"></param>
        /// <param name="varNames"></param>
        /// <param name="elemTypes"></param>
        /// <returns></returns>
        public static string GenParseFunc(GenIndexType genType, string fileName, string[] varNames, ElemType[] elemTypes)
        {
            string ret = "\t///<summary>\n\t///解析字节数据里的数据\n\t///</summary>";
            switch (genType)
            {
                case GenIndexType.None:
                    ret += @"
                    |   public void Parse(byte[] data)
                    |   {
                    |       InitArray();
                    |       id2index = new Dictionary<int, int>();
                    |
                    |       if ((data == null) || (data.Length < 3))
                    |       {
                    |           Debug.LogError(""".StripMargin() + fileName + @" Parse: data Is Null or data length is wrong"");
                    |           return;
                    |       }
                    |       int offLevel = data[0];
                    |       int index = 1;
                    |       int rowNum = ByteFileParseTool.ParseInt_AutoInc(data, ref index, true);//总数据行数，所有模型的数量，不包括excel前4行
                    |       int colNum = ByteFileParseTool.ParseInt_AutoInc(data, ref index, true);//总列数
                    |       ids = new int[rowNum];
                    |       switch (offLevel)
                    |       {
                    |           case 0:
                    |               index += 0;
                    |               break;
                    |           case 1:
                    |               index += rowNum * 3;
                    |               break;
                    |           case 2:
                    |               index += (rowNum * 3) + (rowNum * colNum * 2);
                    |               break;
                    |           default:
                    |               Debug.LogError(""".StripMargin() + fileName + @" Parse: 字节文件的索引偏移信息解析错误（只能是0，1，2）！"");
                    |               return;
                    |       }
                    |       for (int i = 0; i < rowNum; i++)
                    |       {
                    |           for (int j = 0; j < colNum; j++)
                    |           {
                    |               switch (j)
                    |               {
                    |".StripMargin();
                    for (int i = 0; i < varNames.Length; i++)
                    {
                        ret += "\t\t\t\t\tcase " + i + ":\n";
                        switch (elemTypes[i])
                        {
                            case ElemType.Int:
                                ret += "\t\t\t\t\t\t" + varNames[i] + "[i] = ByteFileParseTool.ParseInt_AutoInc(data, ref index, false);\n";
                                ret += "\t\t\t\t\tbreak;\n";
                                break;
                            case ElemType.Float:
                                ret += "\t\t\t\t\t\t" + varNames[i] + "[i] = ByteFileParseTool.ParseFloat_AutoInc(data, ref index);\n";
                                ret += "\t\t\t\t\tbreak;\n";
                                break;
                            case ElemType.String:
                                ret += "\t\t\t\t\t\t" + varNames[i] + "[i] = ByteFileParseTool.ParseString_AutoInc(data, ref index);\n";
                                ret += "\t\t\t\t\tbreak;\n";
                                break;
                        }
                    }
                    ret += @"
                    |               }
                    |           }
                    |           id2index.Add(".StripMargin() + varNames[0] + @"[i], i);
                    |           ids[i] = ".StripMargin() + varNames[0] + @"[i];
                    |       }
                    |   }
                    |".StripMargin();
                    break;
                case GenIndexType.OnlyHeadOfLine:
                    ret += @"
                    |   public void Parse(byte[] data)
                    |   {
                    |       this.data = data;
                    |       id2headIndex = new Dictionary<int, int>();
                    |
                    |       if ((data == null) || (data.Length < 3))
                    |       {
                    |           Debug.LogError(""".StripMargin() + fileName + @" Parse: data Is Null or data length is wrong"");
                    |           return;
                    |       }
                    |       int offLevel = data[0];
                    |       int index = 1;
                    |       int rowNum = ByteFileParseTool.ParseInt_AutoInc(data, ref index, true);//总数据行数，所有模型的数量，不包括excel前4行
                    |       int colNum = ByteFileParseTool.ParseInt_AutoInc(data, ref index, true);//总列数
                    |       ids = new int[rowNum];
                    |       switch (offLevel)
                    |       {
                    |           case 0:
                    |               Debug.LogError(""".StripMargin() + fileName + @" Parse: 解析的字节文件没有存储偏移信息！"");
                    |               break;
                    |           case 1:
                    |           case 2:
                    |               //解析行首偏移数据
                    |               id2headIndex = ByteFileParseTool.ParseHeadIndex(data, index, rowNum);
                    |               break;
                    |           default:
                    |               Debug.LogError(""".StripMargin() + fileName + @" Parse: 字节文件的索引偏移信息解析错误（只能是0，1，2）！"");
                    |               return;
                    |       }
                    |       ids = new List<int>(id2headIndex.Keys).ToArray(); 
                    |   }
                    |".StripMargin();
                    break;
                case GenIndexType.EveryData:
                    ret += @"
                    |   public void Parse(byte[] data)
                    |   {
                    |       this.data = data;
                    |       id2headIndex = new Dictionary<int, int>();
                    |       id2inLineIndex = new Dictionary<int, short[]>();
                    |
                    |       if ((data == null) || (data.Length < 3))
                    |       {
                    |           Debug.LogError(""".StripMargin() + fileName + @" Parse: data Is Null or data length is wrong"");
                    |           return;
                    |       }
                    |
                    |       int offLevel = data[0];
                    |       int index = 1;
                    |       int rowNum = ByteFileParseTool.ParseInt_AutoInc(data, ref index, true);//总数据行数，所有模型的数量，不包括excel前4行
                    |       int colNum = ByteFileParseTool.ParseInt_AutoInc(data, ref index, true);//总列数
                    |       ids = new int[rowNum];
                    |       switch (offLevel)
                    |       {
                    |           case 0:
                    |           case 1:
                    |               Debug.LogError(""".StripMargin() + fileName + @" Parse: 解析的字节文件没有存储每个元素偏移信息！"");
                    |               break;
                    |           case 2:
                    |               //解析行首与每个数据的偏移数据
                    |               id2headIndex = ByteFileParseTool.ParseHeadIndex(data, index, rowNum);
                    |               ids = new List<int>(id2headIndex.Keys).ToArray(); 
                    |               index += rowNum * 3;
                    |               id2inLineIndex = ByteFileParseTool.ParseInLineIndex(data, index, rowNum, colNum, ids);
                    |               break;
                    |           default:
                    |               Debug.LogError(""".StripMargin() + fileName + @" Parse: 字节文件的索引偏移信息解析错误（只能是0，1，2）！"");
                    |               return;
                    |       }
                    |   }
                    |".StripMargin();
                    break;
            }
            return ret;
        }
        /// <summary>
        /// 生成初始化方法
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="elemTypes"></param>
        /// <param name="indexType"></param>
        /// <returns></returns>
        public static string GenInitFunc(string fileName, ElemType[] elemTypes, GenIndexType indexType)
        {
            if (indexType == GenIndexType.None)
            {
                // 旧
                //    bool haveFloat = false, haveString = false;
                //    for (int i = 0; i < elemTypes.Length; i++)
                //    {
                //        if (haveFloat == false && elemTypes[i] == ElemType.Float)
                //        {
                //            haveFloat = true;
                //        }
                //        else if (haveString == false && elemTypes[i] == ElemType.String)
                //        {
                //            haveString = true;
                //        }
                //    }
                //    string ret = "\tpublic void GenAllModel()";
                //    ret += @"
                //|   {
                //|       if (m_dict == null)
                //|       {
                //|           m_dict = new Dictionary<int, Model>();
                //|       }
                //|       int[] ids = ExcelDataStorage.excelId2ids[excelId];
                //|       ".StripMargin() + fileName + @".Model md;
                //|       for (int i = 0; i < ids.Length; i++)
                //|       {
                //|           if (!m_dict.ContainsKey(ids[i]))
                //|           {
                //|               md = new Model()
                //|               {
                //|                   intStart = ExcelDataStorage.excelId2intIndexDict[excelId][ids[i]],".StripMargin();
                //    if (haveFloat)
                //    {
                //        ret += @"
                //|                   floatStart = ExcelDataStorage.excelId2floatIndexDict[excelId][ids[i]],".StripMargin();
                //    }
                //    if (haveString)
                //    {
                //        ret += @"
                //|                   stringStart = ExcelDataStorage.excelId2stringIndexDict[excelId][ids[i]]".StripMargin();
                //    }
                //    ret += @"
                //|               };
                //|               m_dict.Add(ids[i], md);
                //|           }
                //|       }
                //|   }
                //|".StripMargin();
                //    return ret;

                //新
                string ret = @"    public void Init()
                |   {
                |       m_dict = new Dictionary<int, Model>();
                |       ByteFileParseTool.ParseOneByteFileData(GetFileName());
                |       ids = ByteFileParseTool.ls_ids;
                |       for (int i = 0; i < ids.Count; i++)
                |       {
                |           m_dict.Add(ids[i], new Model());
                |       }
                |       inited = true;
                |   }
                |".StripMargin();
                return ret;
            }
            else if (indexType == GenIndexType.OnlyHeadOfLine)
            {
                bool haveFloat = false, haveString = false;
                for (int i = 0; i < elemTypes.Length; i++)
                {
                    if (haveFloat == false && elemTypes[i] == ElemType.Float)
                    {
                        haveFloat = true;
                    }
                    else if (haveString == false && elemTypes[i] == ElemType.String)
                    {
                        haveString = true;
                    }
                }
                string ret = "\tpublic void GenAllModel()";
                ret += @"
            |   {
            |       if (m_dict == null)
            |       {
            |           m_dict = new Dictionary<int, Model>();
            |       }
            |       int[] ids = ExcelDataStorage.excelId2ids[excelId];
            |       ".StripMargin() + fileName + @".Model md;
            |       for (int i = 0; i < ids.Length; i++)
            |       {
            |           if (!m_dict.ContainsKey(ids[i]))
            |           {
            |               ExcelDataStorage.ParseOneModel(excelId, ids[i]);
            |               md = new Model()
            |               {
            |                   intStart = ExcelDataStorage.excelId2intIndexDict[excelId][ids[i]],".StripMargin();
                if (haveFloat)
                {
                    ret += @"
            |                   floatStart = ExcelDataStorage.excelId2floatIndexDict[excelId][ids[i]],".StripMargin();
                }
                if (haveString)
                {
                    ret += @"
            |                   stringStart = ExcelDataStorage.excelId2stringIndexDict[excelId][ids[i]]".StripMargin();
                }
                ret += @"
            |               };
            |               m_dict.Add(ids[i], md);
            |           }
            |       }
            |   }
            |".StripMargin();
                return ret;
            }
            else
            {
                return "";
            }
        }
        /// <summary>
        /// 生成初始化数组大小的代码，只有解析全部数据才会生成
        /// </summary>
        /// <param name="varNames">变量数组</param>
        /// <param name="elemTypes">变量类型</param>
        /// <param name="rowNum">数组大小</param>
        /// <returns></returns>
        public static string GenInitArrayFunc(string[] varNames, ElemType[] elemTypes, int rowNum)
        {
            string ret = @"   /// <summary>
                |   ///初始化数组变量
                |   ///</summary>
                |   private void InitArray()
                |   {
                |".StripMargin();
            for (int i = 0; i < varNames.Length; i++)
            {
                switch (elemTypes[i])
                {
                    case ElemType.Int:
                        ret += "\t\t" + varNames[i] + " = new int[" + rowNum + "];\n";
                        break;
                    case ElemType.Float:
                        ret += "\t\t" + varNames[i] + " = new float[" + rowNum + "];\n";
                        break;
                    case ElemType.String:
                        ret += "\t\t" + varNames[i] + " = new string[" + rowNum + "];\n";
                        break;
                }
            }
            ret += "\t}\n";
            return ret;
        }
        /// <summary>
        /// 生成解析一行数据的代码
        /// </summary>
        /// <param name="varNames"></param>
        /// <param name="elemTypes"></param>
        /// <returns></returns>
        public static string GenParseOneModelByHeadIndexFunc(string[] varNames, ElemType[] elemTypes)
        {
            string ret = @"   /// <summary>
            |   /// 解析行首索引对应的一整个模型数据
            |   /// </summary>
            |   /// <returns>结构体模型数据</returns>
            |   private Model ParseOneModelByHeadIndex(int index)
            |   {
            |       Model md = new Model();
            |       int curIndex = index; 
            |".StripMargin();
            for (int i = 0; i < varNames.Length; i++)
            {
                switch (elemTypes[i])
                {
                    case ElemType.Int:
                        ret += "\t\tmd." + varNames[i] + " = ByteFileParseTool.ParseInt_AutoInc(data, ref curIndex, false);\n";
                        break;
                    case ElemType.Float:
                        ret += "\t\tmd." + varNames[i] + " = ByteFileParseTool.ParseFloat_AutoInc(data, ref curIndex);\n";
                        break;
                    case ElemType.String:
                        ret += "\t\tmd." + varNames[i] + " = ByteFileParseTool.ParseString_AutoInc(data, ref curIndex);\n";
                        break;
                    default:
                        throw new Exception("错误的变量类型 = " + elemTypes[i].ToString());
                }
            }
            ret += "\t\treturn md;\n";
            ret += "\t}\n";
            return ret;
        }
        /// <summary>
        /// 生成获取每个单独数据的方法，只有全解析和解析2级偏移可以
        /// </summary>
        /// <param name="comments"></param>
        /// <param name="elemTypes"></param>
        /// <param name="varNames"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public static string GenEveryDataGetFunc(string[] comments, ElemType[] elemTypes, string[] varNames, string fileName, GenIndexType genType)
        {
            string ret = " ";
            if (genType == GenIndexType.EveryData)
            {
                for (int i = 0; i < varNames.Length; i++)
                {
                    switch (elemTypes[i])
                    {
                        case ElemType.Int:
                            ret += @"   /// <summary>
                        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                        |   /// </summary>
                        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                        |   public int Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                        |   {
                        |       if (HasId(id))
                        |       {
                        |           int off = id2headIndex[id] + id2inLineIndex[id][".StripMargin() + i + @"];
                        |           return ByteFileParseTool.ParseInt(data, off, false);
                        |       }
                        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                        |       return 0;
                        |   }
                        |".StripMargin();
                            break;
                        case ElemType.Float:
                            ret += @"   /// <summary>
                        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                        |   /// </summary>
                        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                        |   public float Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                        |   {
                        |       if (HasId(id))
                        |       {
                        |           int off = id2headIndex[id] + id2inLineIndex[id][".StripMargin() + i + @"];
                        |           return ByteFileParseTool.ParseFloat(data, off);
                        |       }
                        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                        |       return 0;
                        |   }
                        |".StripMargin();
                            break;
                        case ElemType.String:
                            ret += @"   /// <summary>
                        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                        |   /// </summary>
                        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                        |   public string Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                        |   {
                        |       if (HasId(id))
                        |       {
                        |           int off = id2headIndex[id] + id2inLineIndex[id][".StripMargin() + i + @"];
                        |           return ByteFileParseTool.ParseString(data, off);
                        |       }
                        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                        |       return """";
                        |   }
                        |".StripMargin();
                            break;
                        default:
                            throw new Exception("错误的变量类型 = " + elemTypes[i].ToString());
                    }
                }
            }
            if (genType == GenIndexType.None)
            {
                //int intOff = 0, floatOff = 0, stringOff = 0;
                //for (int i = 0; i < varNames.Length; i++)
                //{
                //    switch (elemTypes[i])
                //    {
                //        case ElemType.Int:
                //            ret += @"   /// <summary>
                //        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                //        |   /// </summary>
                //        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                //        |   public int Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                //        |   {
                //        |       if (HasId(id))
                //        |       {
                //        |           int head = ExcelDataStorage.excelId2intIndexDict[excelId][id];
                //        |           return ExcelDataStorage.arr_intData[head + ".StripMargin() + intOff.ToString() + @"];
                //        |       }
                //        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                //        |       return 0;
                //        |   }
                //        |".StripMargin();
                //            intOff++;
                //            break;
                //        case ElemType.Float:
                //            ret += @"   /// <summary>
                //        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                //        |   /// </summary>
                //        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                //        |   public float Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                //        |   {
                //        |       if (HasId(id))
                //        |       {
                //        |           int head = ExcelDataStorage.excelId2floatIndexDict[excelId][id];
                //        |           return ExcelDataStorage.arr_floatData[head + ".StripMargin() + floatOff.ToString() + @"];
                //        |       }
                //        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                //        |       return 0;
                //        |   }
                //        |".StripMargin();
                //            floatOff++;
                //            break;
                //        case ElemType.String:
                //            ret += @"   /// <summary>
                //        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                //        |   /// </summary>
                //        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                //        |   public string Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                //        |   {
                //        |       if (HasId(id))
                //        |       {
                //        |           int head = ExcelDataStorage.excelId2stringIndexDict[excelId][id];
                //        |           return ExcelDataStorage.arr_stringData[head + ".StripMargin() + stringOff.ToString() + @"];
                //        |       }
                //        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                //        |       return """";
                //        |   }
                //        |".StripMargin();
                //            stringOff++;
                //            break;
                //        default:
                //            throw new Exception("错误的变量类型 = " + elemTypes[i].ToString());
                //    }
                //}

                for (int i = 0; i < varNames.Length; i++)
                {
                    switch (elemTypes[i])
                    {
                        case ElemType.Int:
                            ret += @"   /// <summary>
                        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                        |   /// </summary>
                        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                        |   public int Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                        |   {
                        |       if (!inited)
                        |           Init();
                        |       if (HasId(id))
                        |       {
                        |           return m_dict[id].".StripMargin() + varNames[i] + @";
                        |       }
                        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                        |       return 0;
                        |   }
                        |".StripMargin();
                            break;
                        case ElemType.Float:
                            ret += @"   /// <summary>
                        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                        |   /// </summary>
                        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                        |   public float Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                        |   {
                        |       if (!inited)
                        |           Init();
                        |       if (HasId(id))
                        |       {
                        |           return m_dict[id].".StripMargin() + varNames[i] + @";
                        |       }
                        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                        |       return 0;
                        |   }
                        |".StripMargin();
                            break;
                        case ElemType.String:
                            ret += @"   /// <summary>
                        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                        |   /// </summary>
                        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                        |   public string Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                        |   {
                        |       if (!inited)
                        |           Init();
                        |       if (HasId(id))
                        |       {
                        |           return m_dict[id].".StripMargin() + varNames[i] + @";
                        |       }
                        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                        |       return """";
                        |   }
                        |".StripMargin();
                            break;
                        default:
                            throw new Exception("错误的变量类型 = " + elemTypes[i].ToString());
                    }
                }
            }

            if (genType == GenIndexType.OnlyHeadOfLine)
            {
                int intOff = 0, floatOff = 0, stringOff = 0;
                for (int i = 0; i < varNames.Length; i++)
                {
                    switch (elemTypes[i])
                    {
                        case ElemType.Int:
                            ret += @"   /// <summary>
                        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                        |   /// </summary>
                        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                        |   public int Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                        |   {
                        |       if (HasId(id))
                        |       {
                        |           if (!m_dict.ContainsKey(id))
                        |           {
                        |               ExcelDataStorage.ParseOneModel(excelId, id);
                        |           }
                        |           int head = ExcelDataStorage.excelId2intIndexDict[excelId][id];
                        |           return ExcelDataStorage.ls_intData[head + ".StripMargin() + intOff.ToString() + @"];
                        |       }
                        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                        |       return 0;
                        |   }
                        |".StripMargin();
                            intOff++;
                            break;
                        case ElemType.Float:
                            ret += @"   /// <summary>
                        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                        |   /// </summary>
                        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                        |   public float Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                        |   {
                        |       if (HasId(id))
                        |       {
                        |           if (!m_dict.ContainsKey(id))
                        |           {
                        |               ExcelDataStorage.ParseOneModel(excelId, id);
                        |           }
                        |           int head = ExcelDataStorage.excelId2floatIndexDict[excelId][id];
                        |           return ExcelDataStorage.ls_floatData[head + ".StripMargin() + floatOff.ToString() + @"];
                        |       }
                        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                        |       return 0;
                        |   }
                        |".StripMargin();
                            floatOff++;
                            break;
                        case ElemType.String:
                            ret += @"   /// <summary>
                        |   /// 获取id对应模型里的 ".StripMargin() + comments[i] + @" 变量
                        |   /// </summary>
                        |   /// <returns>".StripMargin() + comments[i] + @"</returns>
                        |   public string Get_".StripMargin() + varNames[i].Substring(0, 1).ToUpper() + varNames[i].Substring(1) + @"(int id)
                        |   {
                        |       if (HasId(id))
                        |       {
                        |           if (!m_dict.ContainsKey(id))
                        |           {
                        |               ExcelDataStorage.ParseOneModel(excelId, id);
                        |           }
                        |           int head = ExcelDataStorage.excelId2stringIndexDict[excelId][id];
                        |           return ExcelDataStorage.ls_stringData[head + ".StripMargin() + stringOff.ToString() + @"];
                        |       }
                        |       Debug.LogError(""".StripMargin() + fileName + @" : 不存在此id + "" + id);
                        |       return """";
                        |   }
                        |".StripMargin();
                            stringOff++;
                            break;
                        default:
                            throw new Exception("错误的变量类型 = " + elemTypes[i].ToString());
                    }
                }
            }
            return ret;
        }
        /// <summary>
        /// 生成索引器方法
        /// </summary>
        /// <returns></returns>
        public static string GenIndexerFunc()
        {
            string ret = @"   /// <summary>
            |   /// 索引器：获取对应id的数据模型结构体
            |   /// </summary>
            |   /// <param name=""id"">要获取的模型数据对应的id</param>
            |   public Model this[int id]
            |   {
            |       get
            |       {
            |           if (!inited)
            |               Init();
            |           if (m_dict.ContainsKey(id))
            |           {
            |               return m_dict[id];
            |           }
            |           return null;
            |       }
            |   }
            |".StripMargin();
            return ret;
        }
        /// <summary>
        /// 生成是否有此id的方法
        /// </summary>
        /// <param name="genType"></param>
        /// <returns></returns>
        public static string GenHasIdFunc(GenIndexType genType)
        {
            string ret = "";
            switch (genType)
            {
                case GenIndexType.None:
                    //ret += @"
                    //|   /// <summary>
                    //|   /// 是否存在此id
                    //|   /// </summary>
                    //|   public bool HasId(int id)
                    //|   {
                    //|       if (ExcelDataStorage.excelId2intIndexDict[excelId].ContainsKey(id))
                    //|       {
                    //|           return true;
                    //|       }
                    //|       else
                    //|       {
                    //|           return false;
                    //|       }
                    //|   }
                    //|".StripMargin();

                    ret += @"
                    |   /// <summary>
                    |   /// 是否存在此id
                    |   /// </summary>
                    |   public bool HasId(int id)
                    |   {
                    |       if (m_dict.ContainsKey(id))
                    |       {
                    |           return true;
                    |       }
                    |       else
                    |       {
                    |           return false;
                    |       }
                    |   }
                    |".StripMargin();

                    break;
                case GenIndexType.OnlyHeadOfLine:
                    ret += @"
                    |   /// <summary>
                    |   /// 是否存在此id
                    |   /// </summary>
                    |   public bool HasId(int id)
                    |   {
                    |       if (ExcelDataStorage.excelId2intIndexDict[excelId].ContainsKey(id))
                    |       {
                    |           return true;
                    |       }
                    |       else
                    |       {
                    |           return false;
                    |       }
                    |   }
                    |".StripMargin();
                    break;
                case GenIndexType.EveryData:
                    ret += @"
                    |   /// <summary>
                    |   /// 是否存在此id
                    |   /// </summary>
                    |   public bool HasId(int id)
                    |   {
                    |       if (id2headIndex.ContainsKey(id))
                    |       {
                    |           return true;
                    |       }
                    |       else
                    |       {
                    |           return false;
                    |       }
                    |   }
                    |".StripMargin();
                    break;
            }
            return ret;
        }
        /// <summary>
        /// 生成Ids属性
        /// </summary>
        /// <returns></returns>
        public static string GenIdsProperty()
        {
            string ret = @"    /// <summary>
            |   /// 所有的id
            |   /// </summary>
            |   public int[] Ids { get { return ids; } }
            |
            |".StripMargin();
            return ret;
        }
        /// <summary>
        /// 将一行的数据读取成一个数组
        /// </summary>
        /// <param name="rowData">行数据</param>
        /// <param name="colNum">总列数</param>
        /// <param name="row">第几行，用于输出错误位置</param>
        /// <param name="col">第几列，用于输出错误位置</param>
        /// <returns>字符串数组</returns>
        public static string[] GetAllStringOneLine(IRow rowData, int colNum, int row)
        {
            string[] ret = new string[colNum];
            for (int i = 0; i < colNum; i++)
            {
                ret[i] = GetStringValueInCell(rowData.GetCell(i), row, (i + 1));
            }
            return ret;
        }
    }
    /// <summary>
    /// 生成索引的类型
    /// </summary>
    public enum GenIndexType
    {
        /// <summary>全转数据，不生成索引</summary>
        None,
        /// <summary>只生成每行行首索引</summary>
        OnlyHeadOfLine,
        /// <summary>生成每个数据的索引</summary>
        EveryData
    }
}

